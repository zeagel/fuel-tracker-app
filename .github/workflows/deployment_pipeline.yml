name: Deployment pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
    types: [opened, synchronize]

jobs:

  validate_and_deploy:

    runs-on: ubuntu-18.04
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Fetch git objects and refs
        run: git fetch --prune --unshallow

      - name: Set up node
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'

      - name: Install backend
        run: |
          cd fuel-tracker-be
          npm install

      - name: Create dotenv file for backend
        run: |
          cd fuel-tracker-be
          touch .env
          echo MONGODB_URI="mongodb+srv://${{ secrets.MONGODB_USERNAME }}:${{ secrets.MONGODB_PASSWORD }}@cluster0-nscn5.mongodb.net/${{ secrets.MONGODB_DB_NAME }}?retryWrites=true&w=majority" >> .env
          echo TEST_MONGODB_URI="mongodb+srv://${{ secrets.MONGODB_USERNAME }}:${{ secrets.MONGODB_PASSWORD }}@cluster0-nscn5.mongodb.net/${{ secrets.MONGODB_DB_NAME }}-test?retryWrites=true&w=majority" >> .env
          echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
          echo PORT=5001 >> .env

      #- name: Lint backend
      #  run: |
      #    cd fuel-tracker-be
      #    npm run lint

      #- name: Run integration tests for backend
      #  run: |
      #    cd fuel-tracker-be
      #    npm run test:quiet

      - name: Install frontend
        run: |
          cd fuel-tracker-fe
          npm install

      #- name: Lint frontend
      #  run: |
      #    cd fuel-tracker-fe
      #    npm run lint

      #- name: Make frontend production build for E2E tests
      #  run: |
      #    cd fuel-tracker-be
      #    npm run build:ui

      #- name: Run E2E tests
      #  uses: cypress-io/github-action@v2
      #  with:
      #    working-directory: fuel-tracker-be
      #    start: npm run start:prod
      #    command: npm run test:e2e
      #    wait-on: http://localhost:5001
    
      - name: Prepare deployment package
        if: | # executed only when the change is merged or pushed to master AND commit messages do not contain keyword '#skip'.
          github.event_name == 'push' && 
          !contains(toJSON(github.event.commits.*.message), '#skip')
        run: |
          cd fuel-tracker-be
          npm run deploy:cleanOld
          npm run deploy:prepBE
          npm run deploy:prepFE
      
      # Get previous tag from Github repository and set it in 'tag'
      # variable which is accessable via ${{ steps.previoustag.outputs.tag }}.
      # If tag is not found OR any other error, the tag variable is set to 1.
      - name: Get previous tag
        id: previoustag
        if: |
          github.event_name == 'push' &&
          !contains(toJSON(github.event.commits.*.message), '#skip')
        uses: WyriHaximus/github-action-get-previous-tag@master
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Set previous tag in package.json
        if: |
          github.event_name == 'push' &&
          !contains(toJSON(github.event.commits.*.message), '#skip')
        run: |
          cd web
          npm version $VERSION --allow-same-version
        env:
          VERSION: ${{ steps.previoustag.outputs.tag }}
      
      # Bump package.json version in deployment package based on
      # definition given in commit messages. Checking order is PATCH ->
      # MINOR -> MAJOR if several tags used. Default (patch) is used
      # if none tag provided. Note that this update IS NOT committed
      # to Github because deployment may still fail. Same update is
      # done in Github later in 'tag_deployment_release' job. 
      - name: Bump package.json version, PATCH
        if: |
          github.event_name == 'push' &&
          !contains(toJSON(github.event.commits.*.message), '#skip') && 
          contains(toJSON(github.event.commits.*.message), '[=PATCH=]')
        run: |
          cd web
          npm version patch

      - name: Bump package.json version, MINOR
        if: |
          github.event_name == 'push' &&
          !contains(toJSON(github.event.commits.*.message), '#skip') &&       
          contains(toJSON(github.event.commits.*.message), '#minor')
        run: |
          cd web
          npm version minor

      - name: Bump package.json version, MAJOR
        if: |
          github.event_name == 'push' &&
          !contains(toJSON(github.event.commits.*.message), '#skip') &&
          contains(toJSON(github.event.commits.*.message), '#major')
        run: |
          cd web
          npm version major

      - name: Bump package.json version, DEFAULT (patch)
        if: |
          github.event_name == 'push' &&
          !contains(toJSON(github.event.commits.*.message), '#skip') &&
          !contains(toJSON(github.event.commits.*.message), '#patch') &&
          !contains(toJSON(github.event.commits.*.message), '#minor') &&
          !contains(toJSON(github.event.commits.*.message), '#major')
        run: |
          cd web
          npm version patch

      - name: Add deployment package in local repository
        if: |
          github.event_name == 'push' && 
          !contains(toJSON(github.event.commits.*.message), '#skip')
        run: |
          git config user.email "fta.buildbot@github.com"
          git config user.name "FTA BuildBot"
          git add -A && git commit -m "Deployment to Heroku"

      - name: Deploy to Heroku
        if: |
          github.event_name == 'push' && 
          !contains(toJSON(github.event.commits.*.message), '#skip')
        uses: akhileshns/heroku-deploy@bf72a2f486f950d3c6b1be566f8717f998bbce51
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "tankkitutka"
          heroku_email: "mika.honkanen@gmail.com"
          healthcheck: "https://tankkitutka.herokuapp.com/api/health"
          checkstring: "ok"
          rollbackonhealthcheckfailed: true
          appdir: "web"

      #- name: Build OK Slack notification
      #  if: |
      #    success() &&
      #    github.event_name == 'push' && 
      #   !contains(toJSON(github.event.commits.*.message), '#skip')        
      #  uses: 8398a7/action-slack@b6a4c791ce0c137843eb11e038f855cf567014dc
      #  with:
      #    status: custom
      #    fields: commit,author,took
      #    channel: '#code'
      #    icon_emoji: ':white_check_mark:'
      #    custom_payload: |
      #      {
      #        text: '*Build Bot*',
      #        attachments: [{
      #          color: 'good',
      #          text: `a new version deployed to https://tankkitutka.herokuapp.com (${process.env.AS_COMMIT}) by ${process.env.AS_AUTHOR}, build took ${process.env.AS_TOOK}`,
      #        }]
      #      }
      #  env:
      #    SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      #- name: Build failure Slack notification
      #  if: |
      #    !success() &&
      #    github.event_name == 'push' && 
      #    !contains(toJSON(github.event.commits.*.message), '#skip')
      #  uses: 8398a7/action-slack@b6a4c791ce0c137843eb11e038f855cf567014dc
      #  with:
      #    status: '${{ job.status }}'
      #    fields: repo,message,commit,author,took
      #    channel: '#code'
      #    icon_emoji: ':no_entry:'
      #    author_name: 'Build Bot'
      #  env:
      #    SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      #    MATRIX_CONTEXT: ${{ toJson(matrix) }}

  tag_deployed_release:

    needs: validate_and_deploy # validate_and_deploy must be successfully completed before creating a new release tag.

    runs-on: ubuntu-18.04
    
    if: |
      github.event_name == 'push' && 
      !contains(toJSON(github.event.commits.*.message), '#skip')
    
    steps:

      - name: Checkout repository
        uses: actions/checkout@v2

      # Bump the version and push new tag in Github repository.
      # After this, the version in package.json deployd to Heroku and
      # the tag in Github are in sync.
      
      # To be noted that the package.json file in the Github repository
      # HAVE NOT UPDATED! Github action workflow cannot commit such change
      # in the protected branch. If the version in the package.json file
      # in the source is wanted to be in sync, it has to be handled some
      # other way (manually or automated). 
      - name: Bump version and push tag
        uses: anothrNick/github-tag-action@eca2b69f9e2c24be7decccd0f15fdb1ea5906598
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          DEFAULT_BUMP: patch